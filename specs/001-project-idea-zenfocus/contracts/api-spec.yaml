openapi: 3.0.3
info:
  title: ZenFocus API
  description: RESTful API for ZenFocus focus and wellness application
  version: 1.0.0
  contact:
    name: ZenFocus API Team

servers:
  - url: https://api.zenfocus.app/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Development server

security:
  - BearerAuth: []
  - {} # Allow unauthenticated access for guest features

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        email:
          type: string
          format: email
          description: User email address
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        lastActiveAt:
          type: string
          format: date-time
          description: Last activity timestamp
        totalFocusTime:
          type: integer
          minimum: 0
          description: Total focus time in minutes
        currentStreak:
          type: integer
          minimum: 0
          description: Current consecutive days streak
        longestStreak:
          type: integer
          minimum: 0
          description: Longest historical streak
      required:
        - id
        - email
        - createdAt
        - totalFocusTime
        - currentStreak
        - longestStreak

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, system]
          default: system
        defaultSessionMode:
          type: string
          enum: [study, deepwork, yoga, zen]
          default: study
        ambientSound:
          type: string
          enum: [rain, forest, ocean, silence]
          default: silence
        ambientVolume:
          type: integer
          minimum: 0
          maximum: 100
          default: 50
        notifications:
          type: boolean
          default: true
        autoStartBreaks:
          type: boolean
          default: true
      required:
        - theme
        - defaultSessionMode
        - ambientSound
        - ambientVolume
        - notifications
        - autoStartBreaks

    SessionMode:
      type: object
      properties:
        id:
          type: string
          description: Mode identifier
        name:
          type: string
          description: Display name
        description:
          type: string
          description: Mode description
        defaultWorkDuration:
          type: integer
          minimum: 0
          description: Default work duration in minutes
        defaultBreakDuration:
          type: integer
          minimum: 0
          description: Default break duration in minutes
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Theme color (hex format)
        icon:
          type: string
          description: Icon identifier
        isCustomizable:
          type: boolean
          description: Whether intervals can be customized
        maxWorkDuration:
          type: integer
          minimum: 1
          description: Maximum work duration allowed
        maxBreakDuration:
          type: integer
          minimum: 1
          description: Maximum break duration allowed
      required:
        - id
        - name
        - description
        - defaultWorkDuration
        - defaultBreakDuration
        - color
        - icon
        - isCustomizable

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Session unique identifier
        userId:
          type: string
          format: uuid
          nullable: true
          description: User ID (null for guest sessions)
        mode:
          type: string
          enum: [study, deepwork, yoga, zen]
          description: Session mode used
        startTime:
          type: string
          format: date-time
          description: Session start timestamp
        endTime:
          type: string
          format: date-time
          description: Session end timestamp
        plannedDuration:
          type: integer
          minimum: 1
          description: Planned duration in minutes
        actualDuration:
          type: integer
          minimum: 0
          description: Actual duration in minutes
        completedFully:
          type: boolean
          description: Whether session completed fully
        pauseCount:
          type: integer
          minimum: 0
          description: Number of pauses
        totalPauseTime:
          type: integer
          minimum: 0
          description: Total pause time in minutes
        ambientSound:
          type: string
          enum: [rain, forest, ocean, silence]
          description: Ambient sound used
        notes:
          type: string
          maxLength: 500
          nullable: true
          description: Optional user notes
      required:
        - id
        - mode
        - startTime
        - endTime
        - plannedDuration
        - actualDuration
        - completedFully
        - pauseCount
        - totalPauseTime
        - ambientSound

    CustomInterval:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Custom interval unique identifier
        userId:
          type: string
          format: uuid
          description: Owner user ID
        name:
          type: string
          maxLength: 50
          description: User-defined name
        workDuration:
          type: integer
          minimum: 1
          maximum: 180
          description: Work duration in minutes
        breakDuration:
          type: integer
          minimum: 0
          maximum: 60
          description: Break duration in minutes
        sessionMode:
          type: string
          enum: [study, deepwork, yoga, zen]
          description: Associated session mode
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        isActive:
          type: boolean
          description: Whether interval is active
      required:
        - id
        - userId
        - name
        - workDuration
        - breakDuration
        - sessionMode
        - createdAt
        - isActive

    TimerState:
      type: object
      properties:
        isActive:
          type: boolean
          description: Whether timer is running
        isPaused:
          type: boolean
          description: Whether timer is paused
        mode:
          type: string
          enum: [study, deepwork, yoga, zen]
          description: Current session mode
        phase:
          type: string
          enum: [work, break]
          description: Current timer phase
        timeRemaining:
          type: integer
          minimum: 0
          description: Seconds remaining in current phase
        totalElapsed:
          type: integer
          minimum: 0
          description: Total elapsed seconds
        currentCycle:
          type: integer
          minimum: 1
          description: Current cycle number
      required:
        - isActive
        - isPaused
        - mode
        - phase
        - timeRemaining
        - totalElapsed
        - currentCycle

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        details:
          type: object
          nullable: true
          description: Additional error details
      required:
        - error
        - message

    SessionStats:
      type: object
      properties:
        totalSessions:
          type: integer
          minimum: 0
          description: Total completed sessions
        totalFocusTime:
          type: integer
          minimum: 0
          description: Total focus time in minutes
        averageSessionDuration:
          type: number
          minimum: 0
          description: Average session duration in minutes
        currentStreak:
          type: integer
          minimum: 0
          description: Current daily streak
        longestStreak:
          type: integer
          minimum: 0
          description: Longest daily streak
        completionRate:
          type: number
          minimum: 0
          maximum: 100
          description: Session completion rate percentage
        modeBreakdown:
          type: object
          properties:
            study:
              type: integer
              minimum: 0
            deepwork:
              type: integer
              minimum: 0
            yoga:
              type: integer
              minimum: 0
            zen:
              type: integer
              minimum: 0
          description: Sessions by mode
      required:
        - totalSessions
        - totalFocusTime
        - averageSessionDuration
        - currentStreak
        - longestStreak
        - completionRate
        - modeBreakdown

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  user:
                    $ref: '#/components/schemas/User'
                  preferences:
                    $ref: '#/components/schemas/UserPreferences'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: User registration
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
              required:
                - email
                - password
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  user:
                    $ref: '#/components/schemas/User'
                  preferences:
                    $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/preferences:
    get:
      summary: Get user preferences
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

    put:
      summary: Update user preferences
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session-modes:
    get:
      summary: Get available session modes
      tags: [Sessions]
      security: []
      responses:
        '200':
          description: List of session modes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionMode'

  /sessions:
    get:
      summary: Get user's session history
      tags: [Sessions]
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of sessions to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of sessions to skip
        - name: mode
          in: query
          schema:
            type: string
            enum: [study, deepwork, yoga, zen]
          description: Filter by session mode
        - name: from
          in: query
          schema:
            type: string
            format: date
          description: Start date for filtering (YYYY-MM-DD)
        - name: to
          in: query
          schema:
            type: string
            format: date
          description: End date for filtering (YYYY-MM-DD)
      responses:
        '200':
          description: Session history
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
                  total:
                    type: integer
                    description: Total number of sessions
                  hasMore:
                    type: boolean
                    description: Whether more sessions exist

    post:
      summary: Create a new session
      tags: [Sessions]
      security:
        - BearerAuth: []
        - {} # Allow guest sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode:
                  type: string
                  enum: [study, deepwork, yoga, zen]
                plannedDuration:
                  type: integer
                  minimum: 1
                  maximum: 180
                ambientSound:
                  type: string
                  enum: [rain, forest, ocean, silence]
                  default: silence
              required:
                - mode
                - plannedDuration
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Invalid session data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}:
    put:
      summary: Update session (complete session)
      tags: [Sessions]
      security:
        - BearerAuth: []
        - {} # Allow guest sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endTime:
                  type: string
                  format: date-time
                actualDuration:
                  type: integer
                  minimum: 0
                completedFully:
                  type: boolean
                pauseCount:
                  type: integer
                  minimum: 0
                totalPauseTime:
                  type: integer
                  minimum: 0
                notes:
                  type: string
                  maxLength: 500
                  nullable: true
              required:
                - endTime
                - actualDuration
                - completedFully
                - pauseCount
                - totalPauseTime
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/stats:
    get:
      summary: Get user's session statistics
      tags: [Sessions]
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [week, month, year, all]
            default: month
          description: Time period for statistics
      responses:
        '200':
          description: Session statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStats'

  /custom-intervals:
    get:
      summary: Get user's custom intervals
      tags: [Custom Intervals]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of custom intervals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomInterval'

    post:
      summary: Create a custom interval
      tags: [Custom Intervals]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
                workDuration:
                  type: integer
                  minimum: 1
                  maximum: 180
                breakDuration:
                  type: integer
                  minimum: 0
                  maximum: 60
                sessionMode:
                  type: string
                  enum: [study, deepwork, yoga, zen]
              required:
                - name
                - workDuration
                - breakDuration
                - sessionMode
      responses:
        '201':
          description: Custom interval created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomInterval'
        '400':
          description: Invalid interval data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /custom-intervals/{intervalId}:
    put:
      summary: Update a custom interval
      tags: [Custom Intervals]
      security:
        - BearerAuth: []
      parameters:
        - name: intervalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
                workDuration:
                  type: integer
                  minimum: 1
                  maximum: 180
                breakDuration:
                  type: integer
                  minimum: 0
                  maximum: 60
                isActive:
                  type: boolean
              required:
                - name
                - workDuration
                - breakDuration
                - isActive
      responses:
        '200':
          description: Custom interval updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomInterval'
        '404':
          description: Interval not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a custom interval
      tags: [Custom Intervals]
      security:
        - BearerAuth: []
      parameters:
        - name: intervalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Custom interval deleted
        '404':
          description: Interval not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /timer/state:
    get:
      summary: Get current timer state (for session persistence)
      tags: [Timer]
      security:
        - BearerAuth: []
        - {} # Allow guest access
      responses:
        '200':
          description: Current timer state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerState'
        '404':
          description: No active timer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Save timer state (for session persistence)
      tags: [Timer]
      security:
        - BearerAuth: []
        - {} # Allow guest access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerState'
      responses:
        '200':
          description: Timer state saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerState'

    delete:
      summary: Clear timer state
      tags: [Timer]
      security:
        - BearerAuth: []
        - {} # Allow guest access
      responses:
        '204':
          description: Timer state cleared

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile and preferences management
  - name: Sessions
    description: Focus session management and history
  - name: Custom Intervals
    description: Custom timer interval management
  - name: Timer
    description: Active timer state management
